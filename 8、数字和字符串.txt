1、装箱拆箱
	1) 封装类
		> 所有的基本类型，都有对应的类类型：比如int对应的类是Integer，这种类就叫做封装类
	2) Number类
		> 数字封装类有：Byte,Short,Integer,Long,Float,Double，这些类都是抽象类Number的子类
	3) 基本类型转封装类
		> 例：int i = 5;Integer it = new Integer(i);//基本类型转换成封装类型
	4) 封装类转基本类型
		> 例：int i = 5;Integer it = new Integer(i);int i2 = it.intValue(); //封装类型转换成基本类型
	5) 自动装箱
		> 不需要调用构造方法，通过=符号自动把 基本类型 转换为 类类型 就叫装箱
		例：int i = 5;Integer it2 = i;//自动转换就叫装箱
	6) 自动拆箱
		> 不需要调用Integer的intValue方法，通过=就自动转换成int类型，就叫拆箱
		例：int i = 5;Integer it = new Integer(i);int i3 = it;//自动转换就叫拆箱
	7) int的最大值，最小值
		> Integer.MAX_VALUE、Integer.MIN_VALUE
	8) 总结
		> 自动装箱必须一一匹配：如int只能装箱为Integer
		> 但是拆箱，只要拆出来的基本类型，其范围小于左侧基本类型的取值范围，就可以
		比如：
			Byte b = 5;
			Short s = 5;
			Integer i = 5;
			Long l = 5l;
			
			long x;
			x=  b;
			x=s;
			x=i;
			x=l;
		右边是类类型，左边的x是long基本类型，那么也可以自动拆箱。
		以x=b为例，b自动拆箱出来时byte基本类型，byte的取值范围小于long,那么就不会出现编译错误。
2、字符串转换
	1) 数字转字符串
		> 有两种方法：
			1.使用String的静态方法valueOf
			2.先把基本类型装箱为对象，然后调用对象的toString
	2) 字符串转数字
		> 调用Integer的静态方法parseInt
3、数学方法
	> java.lang.Math提供了一些常用的数学运算方法，并且都是以静态方法的形式存在
	1) 四舍五入 Math.round(f1)
	2) 随机数 Math.random()
	3) 开方 Math.sqrt(9)
	4) 次方 Math.pow(2,4) （2的4次方）
	5) π Math.PI
	6) 自然常数 Math.E
4、格式化输出
	1) 格式化输出
		> 如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，
		拼接就会显得繁琐，使用格式化输出，就可以简洁明了
		> %s 表示字符串  %d 表示数字  %n 表示换行
	2) printf和format
		> printf和format能够达到一模一样的效果，在printf源码中直接调用了format
	3) 换行符
		> 换行符 就是另起一行---'\n'换行(newline)
		> 回车符 就是回到一行的开头 ---'\r'回车(return)
		> 不同操作系统，换行符是不一样的：
			1) 在DOS和Windows中，每行结尾是 “\r\n”；(在eclipse里敲一个回车，实际上是回车换行符)
			2) Linux系统里，每行结尾只有 “\n”；
			3) Mac系统里，每行结尾是只有 "\r"
		> 为了使得同一个java程序的换行符在所有的操作系统中都有一样的表现，使用%n，就可以做到平台无关的换行
	4) 总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达
	例：
		int year = 2020;
		System.out.printf("%8d%n", year);//总长度是8,默认右对齐    ****2020
		System.out.printf("%-8d%n", year);//总长度是8,左对齐	2020****    
		System.out.printf("%08d%n", year);//总长度是8,不够补0 00002020
		System.out.format("%,8d%n",year*10000);//千位分隔符 20,200,000
		System.out.format("%.2f%n",Math.PI);//小数点位数 3.14
5、字符
	1) 保存一个字符的时候用char
	2) char对应的封装类
		> 例： 
			char c1 = 'a';
			Character c = c1; //自动装箱
			c1 = c;//自动拆箱
	3) 1.char c[] 向String转换：
		> String gusspassword =new String(c);
		> String gusspassword =String.valueOf(c);
	    2.String向char c[]转换：
	    	> String ss=”abc”; 
		   char[] c; 
		   c=ss.toCharArray(); 
	4) Character常见方法
		> Character.isLetter('a') //判断是否是字母
		> Character.isDigit('a') //判断是否是数字
		> Character.isWhitespace(' ') //是否是空白
		> Character.isUpperCase('a') //是否是大写
		> Character.isLowerCase('a') //是否是小写
		> Character.toUpperCase('a') //转换为大写
		> Character.toLowerCase('A') //转换为小写
		> String a = 'a' //此句会报错，不能把一个字符转换成字符串
		> String a2 = Character.toString('a') //可以把一个字符转换成字符串

	5) 常见转义
		> 制表符 \t
		> 换行符 \n
		> 单引号 \'
		> 双引号 \"
		> 反斜杠 \\
6、字符串
	1) 创建字符串
		> 字符串是字符的组合，在Java中，字符串是一个类，所以我们见到的字符串都是对象
		> 常见的创建字符串的方式：
			1.每当有一个字面值出现的时候，虚拟机就会创建一个字符串
				> String garen ="盖伦"; //字面值,虚拟机碰到字面值就会创建一个字符串对象
			2.调用String的构造方法时，即会创建一个字符串对象；有两种方式：
				1) String teemo = new String("提莫");
				2) char[] cs = new char[]{'崔','斯','特'};
				    String hero = new String(cs); // 通过字符数组创建一个字符串对象
			3.通过“+”加号进行字符串拼接也会创建新的字符串对象
				> String hero3 = "str1" + "str2";
	2) final
		> String类被修饰为final了，所以String是不能被继承的
		例：static class MyString extends String{} //此句会报错
	3) immutable //一旦创建好一个字符串，里面的内容永远不能改变
		> String 的表现就像是一个常量
		> 比如创建了一个字符串对象，String garen ="盖伦";
		   不可改变的具体含义是指：
			> 不能增加长度
			> 不能减少长度
			> 不能插入字符
			> 不能删除字符
			> 不能修改字符
	4) 字符串格式化
		> 如果不使用字符串格式化，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐 
		例：//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差
		      String sentence = name+ " 在进行了连续 " + kill + " 次击杀后，获得了 " + title +" 的称号"; 
		      //格式化字符串
		     //%s表示字符串，%d表示数字,%n表示换行
		     String sentenceFormat ="%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n";
		     String sentence2 = String.format(sentenceFormat, name,kill,title);
	5) 字符串长度
		> length()方法返回当前字符串的长度；可以有长度为0的字符串,即空字符串
7、操纵字符串
	1) 获取指定位置的字符
		> charAt(int index)
	2) 获取对应的字符数组
		> toCharArray
	3) 截取子字符串
		> subString
		1) 一个参数表示从某个位置开始截取
		2) 两个参数表示从哪个位置开始截取，到哪个位置终止(不截取终止的位置)
	4) 分割
		> split：根据分隔符进行分割
	5) 去掉收尾空格
		> trim
	6) 大小写
		> toLowerCase 全部变成小写
		> toUpperCase 全部变成大写
	7) 判断字符或子字符串出现的位置
		> indexOf //第一次出现的位置
		> lastIndexOf //最后出现的位置
		例：
			String sentence = "盖伦,在进行了连续8次击杀后,获得了超神 的称号";
			System.out.println(sentence.indexOf('8')); //字符第一次出现的位置
			System.out.println(sentence.indexOf("超神")); //字符串第一次出现的位置
			System.out.println(sentence.lastIndexOf("了")); //字符串最后出现的位置
			System.out.println(sentence.indexOf(',',5)); //从位置5开始，出现的第一次,的位置
	8) 是否包含子字符串
		> contains：例：System.out.println(sentence.contains("击杀")); //是否包含字符串"击杀"
	9) 替换
		> replaceAll 替换所有的
		> replaceFirst 只替换第一个
8、比较字符串
	1) == 是否是同一个对象
	例：
		String str1 = "the light";
		String str2 = new String(str1);
		 System.out.println( str1  ==  str2);//此处返回false，str1和str2指向的不是同一个字符串对象
	str1和str2的内容一定是一样的！ 但是，并不是同一个字符串对象
	2) == 是否是同一个对象-特例
	例：
		String str1 = "the light";
		String str3 = "the light";
		System.out.println( str1  ==  str3);//此处返回true
	一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象；
	当第二次创建字符串时，编译器发现已经有现成的了，就会直接拿来用
	3) equals 内容是否相同
		> 使用equals进行字符串内容的比较，必须大小写一致 
		equalsIgnoreCase，忽略大小写判断内容是否一致
	4) startsWith endsWith 是否以子字符串开始或者结束
9、StringBuffer
	1) StringBuffer是可变长的字符串
		1. 追加 append
		2. 删除 delete
		3. 插入 insert 
		4. 反转 reverse
		> 例：
			StringBuffer sb = new StringBuffer(str1); //根据str1创建一个StringBuffer对象
			sb.append("be light"); //在最后追加
	2) 长度 容量
		> 为什么StringBuffer可以变长？
		和String内部是一个字符数组一样，StringBuffer也维护了一个字符数组。 但是，这个字符数组，留有冗余长度
		比如说new StringBuffer("the")，其内部的字符数组的长度，是19，而不是3，这样调用插入和追加，在现成的数组的基础上就可以完成了。
		如果追加的长度超过了19，就会分配一个新的数组，长度比原来多一些，把原来的数据复制到新的数组中，看上去 数组长度就变长了
		例：length: “the”的长度 3；capacity: 分配的总空间 19
