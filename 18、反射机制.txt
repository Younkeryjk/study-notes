1、获取类对象
	1) 什么是类对象
		> 用于描述类都有什么属性，什么方法
	2) 获取类对象
		> 3中方式：
			1> Class.forName
			2> Hero.class
			3> new Hero().getClass()
		> 在一个JVM钟，一种类，只会有一个类对象存在。所以以上三种获取的类对象，都是一样的。
	3) 获取类对象的时候，会导致类属性被初始化
		> 获取类对象，都会导致静态属性被初始化，而且只会执行一次。(Hero.class这种方式不会导致静态属性被初始化)
2、创建对象
	> 通过反射机制创建一个对象
		例：
		    //使用反射的方式创建对象
		    String className = "charactor.Hero";
		    //类对象
		    Class pClass=Class.forName(className);
		    //构造器
		    Constructor c= pClass.getConstructor();
		    //通过构造器实例化
		    Hero h2= (Hero) c.newInstance();
		    h2.name="gareen";
	> 与传统的通过new来获取对象的方式不同，反射机制，会先拿到类的“类对象”，
	   然后通过类对象获取“构造器对象”，再通过构造器对象创建一个对象。
3、访问属性
	> getField和getDeclaredField区别
		1) getField只能获取public的，包括从父类继承来的字段。
		2) getDeclaredField可以获取本类所有的字段，包括private的，但是不能获取继承来的字段。
		    (注：这里只能获取到private的字段，但并不能访问该private字段的值，除非加上setAccessible(true))
4、调用方法
	> 例：
		// 获取这个名字叫做setName，参数类型是String的方法
		Method m = h.getClass().getMethod("setName", String.class);
		// 对h对象，调用这个方法
		m.invoke(h, "盖伦");
5、作用
	> 只需修改配置文件，不需要修改代码
	例：
		非反射方式：
			//new Service1().doService1();
			new Service2().doService2();//如果从第一个业务方法切换到第二个业务方法的时候，必须修改代码，并且重新编译运行，才可以达到效果
		反射方式：只需修改配置文件内容，不需要修改代码
			spring.txt的内容：
				class=reflection.Service1
				method=doService1
			切换到第二个业务方法spring.txt的内容：
				class=reflection.Service2
				method=doService2
			以下代码不用修改：
				//从spring.txt配置文件中获取类名称和方法名称
				File springConfigFile = new File("e:\\project\\j2se\\src\\spring.txt");
				Properties springConfig= new Properties();
				springConfig.load(new FileInputStream(springConfigFile));
				String className = (String) springConfig.get("class");
				String methodName = (String) springConfig.get("method");
				//根据类名称获取类对象
				Class clazz = Class.forName(className);
				//根据方法名称，获取方法对象
				Method m = clazz.getMethod(methodName);
				//获取构造器
				Constructor c = clazz.getConstructor();
				//根据构造器，实例化出对象
				Object service = c.newInstance();
				//调用对象的指定方法
				m.invoke(service);