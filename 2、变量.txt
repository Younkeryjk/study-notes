一、什么是变量
	1、用来命名一个数据的标识符
二、八种基本变量类型
	1、一个变量的类型，决定了该变量可以包含什么样的值。 
	2、Java中有八种基本类型，都是Java语言预先定义好的，并且是关键字。 
	3、整型 （4种）、字符型 （1种） 、浮点型 （2种） 、布尔型（1种）
	4、整型：
		> byte、short、int、long；区别在于不同类型的整型，最大值，最小值不一样；
		> 如果试图给byte类型的变量赋予超出其范围的值，就会产生编译错误，这个时候就需要进行类型转换
		> byte：长度：1个字节；范围：-128~127；short 长度：2个字节；int 长度：4个字节；long 长度：8个字节
	5、字符型：
		> char类型用于存放一个字符，值用单引号'表示 (双引号表示字符串)
		> 其长度和short一样，也是16位的
		> 只能存放一个字符，超过一个字符就会产生编译错误
	6、浮点型：
		> 浮点数类型有两种：float 长度为32位 ；double 长度为64位；
		> 注意： 默认的小数值是double类型的；所以 float f = 54.321会出现编译错误，因为其类型 长度为64，超过了float的长度32；
		> 在数字后面加一个字母f，直接把该数字声明成float类型
	7、布尔型：
		> 布尔型用于表示真假，其长度为1；虽然布尔型真正存放的数据是0(false) 1(true)，但是不能直接使用0 1 进行赋值
	8、String类型：
		> String类型其实并不是基本类型；String类型是Immutable的，一旦创建就不能够被改变
三、字面值
	> 给基本类型的变量赋值的方式叫做 字面值
	1、整数字面值
		> 当以l或者L结尾的时候，一个整数字面值就是long类型，否则就是int类型。(建议使用大写的L而非小写的l，因为容易和1混淆)
		> byte,short,int和long的值都可以通过int类型的字面值来创建。
		> 整数的字面值可以用如下四种进制来表示：十进制、十六进制（包含从0-9的数字，和从A-F）、八进制、二进制
	2、浮点数字面值
		> 当以f或者F结尾的时候，就表示一个float类型的浮点数，否则就是double类型
		> 浮点数还可以用E或者e表示（科学计数法）
	3、字符和字符串字面值
		> 字符的字面值放在单引号中，字符串的字面值放在双引号中
		> 需要注意的是，\表示转义，比如需要表示制表符，回车换行，双引号等就需要用 \t \r \n \" 的方式进行
四、类型转换
	> 不同类型之间的数据可以互相转换，但是要满足一定的规则
	1、转换规则
		> 从小到大自动转，从大到小强制转
		（需要注意的一点是 虽然short和char都是16位的，长度是一样的，但依然需要进行强制转换）
	2、低精度向高精度转换
		> 低精度向高精度转换 是可以正常转换的
	3、高精度向低精度转换
		> 把int类型的数据转成为byte类型的数据，是有风险的；有的时候是可以转换的，比如 b = i1 (i1=10);
		有的时候不可以转换 比如 b= i2 (i2=300) 因为放不下了，编译器就会提示错误
		> 强制转换的意思就是，转是可以转的，但是不对转换之后的值负责
五、命名规则
	1、命名规则
		> 变量命名只能使用字母 数字 $ _；变量第一个字符 只能使用 字母 $ _；变量第一个字符 不能使用数字
	2、使用完整的单词命名，而非缩写    
	3、不能只使用关键字，但是可以包含关键字    
	4、关键字列表1    
	5、关键字列表2
	6、中文也是可以用来命名变量的    
		> 中文也是可以用来命名变量的，但是在实际工作中。。。别这么干。。。
六、作用域
	1、字段，属性，Field    
		> 当一个变量被声明在类下面，变量就叫做字段 或者属性、成员变量、Field
		> 其作用域就是从其声明的位置开始的整个类
	2、参数
		> 如果一个变量，是声明在一个方法上的，就叫做参数
		> 参数的作用域即为该方法内的所有代码
		> 其他方法不能访问该参数
		> 类里面也不能访问该参数
	3、局部变量
		> 声明在方法内的变量，叫做局部变量 
		> 其作用域在声明开始的位置，到其所处于的块结束位置
		> 属性的作用域在方法中，参数的作用域也在方法中，如果属性和参数命名相同，以离他最近的为准
七、final
	> final 修饰一个变量，不能改变(准确的描述是 当一个变量被final修饰的时候，该变量只有一次赋值的机会)
	1、在声明的时候赋值 final int i = 5; i = 10; (i = 10编译错误，因为已经赋值了)
	2、在声明的时候没有赋值 final int i; i = 10;  i = 11; (i = 11编译错误，因为已经赋值了)
	3、final 修饰其他 final 除了修饰变量，还可以修饰类，修饰方法
八、表达式
	> 表达式是由变量、操作符以及方法调用所构成的结构；以;结尾的一段代码，即为一个表达式
	> ; 也是一个完整的表达式
九、块
	> 从{ 开始 到对应的} 结束，即一个块