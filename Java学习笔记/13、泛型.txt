1、集合中的泛型
	1) 不使用泛型
		> List默认接受Object类型的对象，所以可以加入各种对象；
		   但是取出时(比如get(0))如果加入的对象类型太多，就无法记着获取的对象时什么类型了
		   例：
		   	ADHero（物理攻击英雄） APHero（魔法攻击英雄）都是Hero的子类
			ArrayList 默认接受Object类型的对象，所以所有对象都可以放进ArrayList中
			所以get(0) 返回的类型是Object
			接着，需要进行强制转换才可以得到APHero类型或者ADHero类型。
			如果软件开发人员记忆比较好，能记得哪个是哪个，还是可以的。 
			但是开发人员会犯错误会记错,这样就会出现类型转换异常
	2) 使用泛型
		> 使用泛型的好处：
			泛型表示这种容器，只能存放特定的类型及其子类型，其他类型就放不进去了。这样使用时就不容易出错
			(比如List加入了太多的类型的对象，get(index) 取出时就不知道取出的是什么类型了)
		> 泛型的用法是在容器后面添加<Type> Type可以是类，抽象类，接口
	3) 子类对象
		容器的泛型定义后，可以放定义的类型及其子类
	4) 泛型的简写
		> 完整写法：ArrayList<Hero> heros = new ArrayList<Hero>();
		> 简写：ArrayList<Hero> heros = new ArrayList<>();
2、支持泛型的类
	1) 不支持泛型的Stack
		1> 以Stack栈为例子，如果不使用泛型
			> 当需要一个只能放Hero的栈的时候，就需要设计一个HeroStack
			> 当需要一个只能放Item的栈的时候，就需要一个ItemStack
	2) 支持泛型的Stack
		> 设计一个支持泛型的栈MyStack;设计这个类的时候，在类的声明上，加上一个<T>，表示该类支持泛型。
		> T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。
3、通配符
	1) ? extends
		> 例：
			ArrayList heroList<? extends Hero> 表示这是一个Hero泛型或者其子类泛型
			heroList 的泛型可能是Hero
			heroList 的泛型可能是APHero
			heroList 的泛型可能是ADHero
		> 可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的
		> 但是，不能往里面放东西，因为放APHero就不满足<ADHero>，放ADHero又不满足<APHero>
	2) ? super
		> 例：
			ArrayList heroList<? super Hero> 表示这是一个Hero泛型或者其父类泛型
			heroList的泛型可能是Hero
			heroList的泛型可能是Object
		> 可以往里面插入Hero以及Hero的子类
		> 但是取出来有风险，因为不确定取出来是Hero还是Object
	3) 泛型通配符?
		> 泛型通配符? 代表任意泛型，所以这个容器什么泛型都有可能
		> 所以只能以Object的形式取出来
		> 并且不能往里面放对象，因为不知道到底是一个什么泛型的容器
	4) 总结
		> 如果希望只取出，不插入，就使用? extends Hero
		> 如果希望只插入，不取出，就使用? super Hero
		> 如果希望又能插入，又能取出，就不要用通配符？
4、泛型转型
	1) 对象转型
		> 子类转父类 是一定可以成功的
	2) 子类泛型转父类泛型
		> 子类泛型不可以转换为父类泛型
		例：	ArrayList<Hero> hs =new ArrayList<>();
			ArrayList<ADHero> adhs =new ArrayList<>();
			//假设能转换成功
			hs = adhs;
			//作为Hero泛型的hs,是可以向其中加入APHero的
			//但是hs这个引用，实际上是指向的一个ADHero泛型的容器
			//如果能加进去，就变成了ADHero泛型的容器里放进了APHero，这就矛盾了
			hs.add(new APHero());
	
	3) 父类泛型转子类泛型
		> 父类泛型不可以转为子类泛型，本来能装多种子类型对象，转换成子类型后，
		    只能装转换成的那一种子类型了，别的子类型不能装了(自己的理解)