1、基本内置注解
	1) @Override
		> 用在方法上，表示这个方法重写了父类的方法，如toString()。如果父类没有这个方法，那么无法编译通过。
			例：在fromString()方法上加上@Override 注解，就会失败，因为Hero类的父类Object，并没有fromString方法
	2) @Deprecated
		> 表示这个方法已过期，不建议使用(暗示在将来某个版本，可能会取消掉
	3) @SuppressWarnings
		> Suppress英文的意思是抑制的意思，这个注解的用处是忽略警告信息。
		    比如在使用集合的时候，为了偷懒，会不写泛型，那么编译器就会出现警告，加上就没警告了
		@SuppressWarnings 有常见的值，分别对应如下意思
			1> deprecation：使用了不赞成使用的类或方法时的警告(使用@Deprecated使得编译器产生的警告)；
			2> unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 关闭编译器警告
			3> fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;
			4> path：在类路径、源文件路径等中有不存在的路径时的警告;
			5> serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;
			6> finally：任何 finally 子句不能正常完成时的警告;
			7> rawtypes 泛型类型未指明
			8> unused 引用定义了，但是没有被使用
			9> all：关于以上所有情况的警告。
	4) SafeVarargs
		> 当使用可变数量的参数的时候，而参数的类型又是泛型T的话，就会出现警告。 
		   这个时候，就使用@SafeVarargs来去掉这个警告
		> @SafeVarargs注解只能用在参数长度可变的方法或构造方法上，且方法必须声明为static或final，否则会出现编译错误。
		    一个方法使用@SafeVarargs注解的前提是，开发人员必须确保这个方法的实现中对泛型类型参数的处理不会引发类型安全问题。
	5) @FunctionalInterface
		> 用于约定函数式接口。
		> 函数式接口概念： 如果接口中只有一个抽象方法（可以包含多个默认方法或多个static方法），
		   该接口称为函数式接口。函数式接口其存在的意义，主要是配合Lambda 表达式 来使用。
		   例：
			AD接口只有一个adAttack方法，那么就可以被注解为@FunctionalInterface,
			而AP接口有两个方法apAttack()和apAttack2(),那么就不能被注解为函数式接口
	6) 总结
		从开发过程中的体验来讲，有也可以，没有也可以。重点还是自定义注解。
2、自定义注解
	1) 创建注解类型的时候不使用class也不使用interface，而使用@interface
		> 例：public @interface JDBCConfig
	2) 元注解
		1> @Target({METHOND, TYPE})
			> 表示这个注解可以用在类/接口上，还可以用在方法上 
		2> @Retention(RetentionPolicy.RUNTIME)
			> 表示这是一个运行时注解，即运行起来之后，才获取注解中的相关信息，而不像基本注解如
			   @Override那种不用运行，在编译Eclipse时就可以进行相关工作的编译时注解。
		3> @inherited 
			> 表示这个注解可以被子类继承
		4> @Documented
			> 表示当执行javadoc的时候，本注解会生成相关文档
	3) 注解元素
		> 注解元素用于存放注解信息，在解析的时候获取出来
		   例：
			String ip(); 
			int port() default 3306; 
			String database(); 
			String encoding(); 
			String loginName(); 
			String password(); 
	4) 使用自定义注解方式
		> 例：
			@JDBCConfig(ip = "127.0.0.1", database = "test", encoding = "UTF-8", loginName = "root", password = "admin")
	5) 解析自定义注解
		> 例：
			String ip = config.ip();
			int port = config.port();
			String database = config.database();
			String encoding = config.encoding();
			String loginName = config.loginName();
			String password = config.password();
3、元注解
	1) 元注解用于注解自定义注解的注解
		1> @Target
		2> @Retention
		3> @Inherited
		4> @Documented
		5> @Repeatable
	2) @Target
		> 表示这个注解能放在什么位置上，是只能放在类上？还是即可以放在方法上，又可以放在属性上。
		> 可以选择的位置列表：
			1> ElementType.TYPE：能修饰类、接口或枚举类型
			2> ElementType.FIELD：能修饰成员变量
			3> ElementType.METHOD：能修饰方法
			4> ElementType.PARAMETER：能修饰参数
			5> ElementType.CONSTRUCTOR：能修饰构造器
			6> ElementType.LOCAL_VARIABLE：能修饰局部变量
			7> ElementType.ANNOTATION_TYPE：能修饰注解
			8> ElementType.PACKAGE：能修饰包
	3) @Retention
		> 表示声明周期，可选的值有3个：
			1> RetentionPolicy.SOURCE： 注解只在源代码中存在，编译成class之后，就没了。@Override 就是这种注解。
			2> RetentionPolicy.CLASS： 注解在java文件编程成.class文件后，依然存在，但是运行起来后就没了。
			     @Retention的默认值，即当没有显式指定@Retention的时候，就会是这种类型。
			3> RetentionPolicy.RUNTIME： 注解在运行起来之后依然存在，程序可以通过反射获取这些信息，自定义注解@JDBCConfig 就是这样。
	4) @Inherited
		> 表示该注解具有继承性。
		   例：设计一个DBUtil的子类，其getConnection2方法，可以获取到父类DBUtil上的注解信息。
	5) @Documented
		> 在用javadoc命令生成API文档后，DBUtil的文档里会出现该注解说明。	
	6) @Repeatable
		> 当没有@Repeatable修饰的时候，注解在同一个位置，只能出现一次，重复做两次就会报错了。 
		> 使用@Repeatable之后，再配合一些其他动作，就可以在同一个地方使用多次了。
4、仿Hibernate注解
	> 当注解的方法是value的时候，给这个注解赋值时，本来应该是：
		@MyColumn(value="name_")
	   现在可以简略一点，写为
		@MyColumn("name_")
5、注解分类
	1) 按照作用域分
		根据注解的作用域@Retention，注解分为：
			1> RetentionPolicy.SOURCE： Java源文件上的注解
			2> RetentionPolicy.CLASS： Class类文件上的注解
			3> RetentionPolicy.RUNTIME： 运行时的注解
	2) 按照来源分
		按照注解的来源，也是分为3类：
			1> 内置注解 如@Override ，@Deprecated 等等
			2> 第三方注解，如Hibernate, Struts等等
			3> 自定义注解，如仿hibernate的自定义注解